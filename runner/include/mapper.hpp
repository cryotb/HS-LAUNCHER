#pragma once

#pragma warning(disable : 4834)

namespace mapper
{
	inline uint8_t loader_default[457] = {
0x40, 0x56, 0x57, 0x48, 0x83, 0xEC, 0x28, 0x48, 0x8B, 0xF1, 0x48, 0x85,
0xC9, 0x0F, 0x84, 0xAD, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x79, 0x38, 0x48,
0x85, 0xFF, 0x0F, 0x84, 0xA0, 0x01, 0x00, 0x00, 0xB8, 0xEF, 0xBE, 0x00,
0x00, 0x48, 0x89, 0x5C, 0x24, 0x40, 0x66, 0x89, 0x07, 0x48, 0x8B, 0x41,
0x10, 0x4C, 0x8B, 0x49, 0x18, 0x4C, 0x8B, 0x59, 0x08, 0x48, 0x89, 0x6C,
0x24, 0x48, 0x4C, 0x2B, 0x58, 0x30, 0x41, 0x83, 0x39, 0x00, 0x4C, 0x89,
0x7C, 0x24, 0x20, 0x74, 0x64, 0xBB, 0x00, 0xF0, 0x00, 0x00, 0xBD, 0x00,
0xA0, 0x00, 0x00, 0x41, 0x8B, 0x51, 0x04, 0x83, 0xFA, 0x08, 0x72, 0x46,
0x48, 0x8D, 0x42, 0xF8, 0x33, 0xC9, 0x48, 0xD1, 0xE8, 0x4C, 0x63, 0xD0,
0x85, 0xC0, 0x7E, 0x36, 0x41, 0x0F, 0xB7, 0x44, 0x49, 0x08, 0x0F, 0xB7,
0xD0, 0x66, 0x85, 0xC0, 0x74, 0x1C, 0x45, 0x8B, 0x01, 0x66, 0x23, 0xC3,
0x4C, 0x03, 0x46, 0x08, 0x66, 0x3B, 0xC5, 0x75, 0x0D, 0xFF, 0x47, 0x08,
0x81, 0xE2, 0xFF, 0x0F, 0x00, 0x00, 0x4E, 0x01, 0x1C, 0x02, 0x48, 0xFF,
0xC1, 0x49, 0x3B, 0xCA, 0x7C, 0xCE, 0x41, 0x8B, 0x51, 0x04, 0x8B, 0xC2,
0x4C, 0x03, 0xC8, 0x41, 0x83, 0x39, 0x00, 0x75, 0xA6, 0x4C, 0x8B, 0x7E,
0x20, 0x4C, 0x89, 0x74, 0x24, 0x50, 0x41, 0x8B, 0x07, 0x85, 0xC0, 0x0F,
0x84, 0xB9, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00,
0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x56, 0x08, 0x41, 0x8B, 0x4F, 0x0C,
0x41, 0x8B, 0x5F, 0x10, 0x48, 0x03, 0xCA, 0x44, 0x8B, 0xF0, 0x48, 0x03,
0xDA, 0x48, 0x8B, 0x46, 0x28, 0x4C, 0x03, 0xF2, 0xFF, 0xD0, 0x48, 0x8B,
0xE8, 0x48, 0x85, 0xC0, 0x0F, 0x84, 0xB2, 0x00, 0x00, 0x00, 0x49, 0x8B,
0x0E, 0x48, 0x85, 0xC9, 0x74, 0x6C, 0x4C, 0x2B, 0xF3, 0x48, 0x85, 0xC9,
0x79, 0x37, 0x48, 0x8B, 0x46, 0x30, 0x0F, 0xB7, 0xD1, 0x48, 0x8B, 0xCD,
0xFF, 0xD0, 0x48, 0x85, 0xC0, 0x75, 0x40, 0xB8, 0x04, 0x0E, 0x00, 0x00,
0x66, 0x89, 0x47, 0x02, 0x33, 0xC0, 0x4C, 0x8B, 0x74, 0x24, 0x50, 0x48,
0x8B, 0x6C, 0x24, 0x48, 0x48, 0x8B, 0x5C, 0x24, 0x40, 0x4C, 0x8B, 0x7C,
0x24, 0x20, 0x48, 0x83, 0xC4, 0x28, 0x5F, 0x5E, 0xC3, 0x48, 0x8B, 0x56,
0x08, 0x4C, 0x8B, 0x46, 0x30, 0x48, 0x83, 0xC2, 0x02, 0x48, 0x03, 0xD1,
0x48, 0x8B, 0xCD, 0x41, 0xFF, 0xD0, 0x48, 0x85, 0xC0, 0x74, 0x47, 0x48,
0x89, 0x03, 0x48, 0x83, 0xC3, 0x08, 0xFF, 0x47, 0x0C, 0x49, 0x8B, 0x0C,
0x1E, 0x48, 0x85, 0xC9, 0x75, 0x9A, 0x41, 0x8B, 0x47, 0x14, 0x49, 0x83,
0xC7, 0x14, 0x85, 0xC0, 0x0F, 0x85, 0x52, 0xFF, 0xFF, 0xFF, 0x48, 0x8B,
0x46, 0x10, 0x8B, 0x48, 0x28, 0x85, 0xC9, 0x74, 0x2D, 0x8B, 0xC1, 0x45,
0x33, 0xC0, 0x48, 0x03, 0x46, 0x08, 0xC6, 0x47, 0x04, 0x01, 0x48, 0x8B,
0x4E, 0x08, 0x41, 0x8D, 0x50, 0x01, 0xFF, 0xD0, 0xEB, 0x84, 0xB8, 0x06,
0x0E, 0x00, 0x00, 0xE9, 0x74, 0xFF, 0xFF, 0xFF, 0xB8, 0x02, 0x0E, 0x00,
0x00, 0xE9, 0x6A, 0xFF, 0xFF, 0xFF, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xE9,
0x66, 0xFF, 0xFF, 0xFF, 0x33, 0xC0, 0x48, 0x83, 0xC4, 0x28, 0x5F, 0x5E,
0xC3
	};

	typedef HMODULE(WINAPI* load_library_multibyte_fn)(LPCSTR);
	typedef FARPROC(WINAPI* get_proc_address_fn)(HMODULE, LPCSTR);

	typedef INT(__stdcall* dllmain)(HMODULE, DWORD, LPVOID);

	struct loader_job_info_t
	{
		UINT16 Magic;
		UINT16 ErrorCode;
		BOOLEAN DidComplete;

		struct Statistics_t
		{
			INT NumRelocsProcd{};
			INT NumImportsProcd{};
		} Stats{};
	};

	struct loader_data_t
	{
		LPVOID TargetBase;
		LPVOID ImageBase;

		PIMAGE_NT_HEADERS NtHeaders;
		PIMAGE_BASE_RELOCATION BaseReloc;
		PIMAGE_IMPORT_DESCRIPTOR ImportDirectory;

		// we can put kernel32 imports here since they're located at the same address for every process.
		// other ones will not work for obvious reasons, so be aware of that please.
		load_library_multibyte_fn fnLoadLibraryA;
		get_proc_address_fn fnGetProcAddress;

		// this can be used to track what the loader has done.
		// fill this out on post completion of the initial loader procedure.
		loader_job_info_t JobInfo{};
	};

	/// <summary>
	/// maps given image buffer into remote process.
	/// </summary>
	/// <param name="file_buffer"></param>
	/// <param name="process_handle"></param>
	/// <returns>zero if successful, error code if not.</returns>
	extern std::uint16_t load_library(void* file_buffer, HANDLE process_handle, uint8_t* loader_bytes, size_t loader_size);
}
